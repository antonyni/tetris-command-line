const tetrisBoardCommands = require('../src/tetrisBoardCommands.js');
const data = [[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .']];
const emptySpot = ' .';
const blueBlock = '{blue-fg}██{/blue-fg}';
const iBlock = {
    forms: [[[emptySpot, emptySpot, emptySpot, emptySpot],
    [emptySpot, emptySpot, emptySpot, emptySpot],
    [blueBlock, blueBlock, blueBlock, blueBlock],
    [emptySpot, emptySpot, emptySpot, emptySpot]],

    [[emptySpot, blueBlock, emptySpot, emptySpot],
    [emptySpot, blueBlock, emptySpot, emptySpot],
    [emptySpot, blueBlock, emptySpot, emptySpot],
    [emptySpot, blueBlock, emptySpot, emptySpot]],

    [[emptySpot, emptySpot, emptySpot, emptySpot],
    [emptySpot, emptySpot, emptySpot, emptySpot],
    [blueBlock, blueBlock, blueBlock, blueBlock],
    [emptySpot, emptySpot, emptySpot, emptySpot]],

    [[emptySpot, blueBlock, emptySpot, emptySpot],
    [emptySpot, blueBlock, emptySpot, emptySpot],
    [emptySpot, blueBlock, emptySpot, emptySpot],
    [emptySpot, blueBlock, emptySpot, emptySpot]],]
}

test('left block', () => {


    const expected2 =  [[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', blueBlock, blueBlock, blueBlock, blueBlock, ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .']];
    const left = tetrisBoardCommands.goLeft([1,4],iBlock,0,data,10,0);
    expect(left.boardPieces).toEqual(expected2);
   
}
)

test('right block', () => {


    const expected2 =  [[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', blueBlock, blueBlock, blueBlock, blueBlock, ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .']];
    const right = tetrisBoardCommands.goRight([1,2],iBlock,0,data,10,0);
    expect(right.boardPieces).toEqual(expected2);
   
}
)

test('right block', () => {


    const expected3 =   [[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
    [' .', ' .', ' .', ' .', ' .', blueBlock, blueBlock, blueBlock, blueBlock, ' .', ' .', ' .', ' .', ' .'],[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .']];
    const instantDrop = tetrisBoardCommands.instantDrop([2,5],18,iBlock,0,data,0);
    expect(instantDrop.boardPieces).toEqual(expected3);
   
}
)