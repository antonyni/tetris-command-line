const tetrisBoardCommands = require('../src/tetrisBoardCommands.js');
const data = [[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .']];
const emptySpot = ' .';
const blueBlock = '{blue-fg}██{/blue-fg}';
const iBlock = {
    forms: [[[emptySpot, emptySpot, emptySpot, emptySpot],
    [emptySpot, emptySpot, emptySpot, emptySpot],
    [blueBlock, blueBlock, blueBlock, blueBlock],
    [emptySpot, emptySpot, emptySpot, emptySpot]],

    [[emptySpot, blueBlock, emptySpot, emptySpot],
    [emptySpot, blueBlock, emptySpot, emptySpot],
    [emptySpot, blueBlock, emptySpot, emptySpot],
    [emptySpot, blueBlock, emptySpot, emptySpot]],

    [[emptySpot, emptySpot, emptySpot, emptySpot],
    [emptySpot, emptySpot, emptySpot, emptySpot],
    [blueBlock, blueBlock, blueBlock, blueBlock],
    [emptySpot, emptySpot, emptySpot, emptySpot]],

    [[emptySpot, blueBlock, emptySpot, emptySpot],
    [emptySpot, blueBlock, emptySpot, emptySpot],
    [emptySpot, blueBlock, emptySpot, emptySpot],
    [emptySpot, blueBlock, emptySpot, emptySpot]],]
}
    test('Empty board created', () => {

        expect(data).toEqual(tetrisBoardCommands.populateEmptyBoard());
    });

    test('Board string created', () => {
        const expected = ' . . . . . . . . . .\n' + ' . . . . . . . . . .\n' + ' . . . . . . . . . .\n'
            + ' . . . . . . . . . .\n' + ' . . . . . . . . . .\n' + ' . . . . . . . . . .\n' + ' . . . . . . . . . .\n'
            + ' . . . . . . . . . .\n' + ' . . . . . . . . . .\n' + ' . . . . . . . . . .\n' + ' . . . . . . . . . .\n' + ' . . . . . . . . . .\n' + ' . . . . . . . . . .\n'
            + ' . . . . . . . . . .\n' + ' . . . . . . . . . .\n' + ' . . . . . . . . . .\n' + ' . . . . . . . . . .\n'
            + ' . . . . . . . . . .\n' + ' . . . . . . . . . .\n' + ' . . . . . . . . . .';


        expect(expected).toEqual(tetrisBoardCommands.boardToString(data));
    });
    test('Test random piece', () => {
        jest.spyOn(global.Math, 'random').mockReturnValue(0);
        expect(tetrisBoardCommands.randomBlock()).toEqual(iBlock); 
    }

    )
    test('Test rotation free', () => {
        const expected = [[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', 'test', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', 'test', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .',' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', 'test', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', 'test', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .']];
        const rotate = tetrisBoardCommands.rotateBlock([19,2],iBlock,0,expected);
        expect(rotate.form).toEqual(1);
       
    }
    )

    test('Test rotation blocked', () => {
        const expected = [[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', 'test', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', 'test', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .',' blocked', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', 'test', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', 'blocked', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', 'test', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .']];
        const rotate = tetrisBoardCommands.rotateBlock([19,2],iBlock,0,expected);
        expect(rotate.form).toEqual(0);
       
    }
    )

    test('Test drop bottom', () => {
        const expected = [[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', blueBlock,blueBlock, blueBlock, blueBlock, ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .']];
        const rotate = tetrisBoardCommands.dropBlock([19,2],iBlock,0,data,1,0);
        expect(rotate.boardPieces).toEqual(expected);
       
    })
    test('Test drop blocked', () => {
        const blocked = [[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', 'blocked', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .']];

        const expected2 = [[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .',' .',' .',' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'], [' .', ' .', blueBlock, blueBlock, blueBlock, blueBlock, ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],
        [' .', ' .', ' .', 'blocked', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .'],[' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .', ' .']];
        const rotate = tetrisBoardCommands.dropBlock([18,2],iBlock,0,blocked,1,0);
        expect(rotate.boardPieces).toEqual(expected2);
       
    }
    )






